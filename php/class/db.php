<? define('prefix','tinywebdb_');define('filePrefix','tinywebdbFILE_');define('settingPrefix','tinywebdbMANAGE_');function t($obj){exit(var_dump($obj));}class db{public static function get($tag){$kv=new SaeKV();return $kv->get(prefix.$tag);}public static function set($tag,$value){$kv=new SaeKV();return $kv->set(prefix.$tag,$value);}public static function del($tag){$kv=new SaeKV();return $kv->delete(prefix.$tag);}public static function getall($prefix='',$return_plain_list=false){$kv=new SaeKV();$tags=[];$ret=$kv->pkrget(prefix.$prefix,100);while(true){foreach($ret as $k=>$v){if($return_plain_list){$tags[]=[substr($k,strlen(prefix)),''.$v];}else{$tags[substr($k,strlen(prefix)).'']=''.$v;}}end($ret);$start_key=key($ret);$i=count($ret);if($i<100)break;$ret=$kv->pkrget(prefix.$prefix,100,$start_key);}return $tags;}public static function havetag(){$kv=new SaeKV();return 0+count($kv->pkrget(prefix,1))>0;}public static function isempty(){$kv=new SaeKV();return 0+count($kv->pkrget(prefix,1))==0;}public static function clear($prefix=''){foreach(db::getall($prefix)as $k=>$v){db::del($k);}}public static function search($keyword,$ignoreCase=true,$searchInTag=true,$searchInValue=false,$prefix='',$return_plain_list=false){$keyword=$ignoreCase ? strtolower($keyword):$keyword;if($keyword==''){return db::getall($prefix,$return_plain_list);}$kv=new SaeKV();$tags=[];$ret=$kv->pkrget(prefix.$prefix,100);while(true){foreach($ret as $k=>$v){$k=substr($k,strlen(prefix));$kk=$ignoreCase ? strtolower($k):$k;$vv=$ignoreCase ? strtolower($v):$v;if(($searchInTag===true&&strpos($kk,$keyword)!==false)||($searchInValue===true&&strpos($vv,$keyword)!==false)){if($return_plain_list){$tags[]=[$k,''.$v];}else{$tags[$k]=''.$v;}}}end($ret);$start_key=key($ret);$i=count($ret);if($i<100)break;$ret=$kv->pkrget(prefix.$prefix,100,$start_key);}return $tags;}public static function count($prefix=''){$count=0;foreach(db::getall($prefix)as $k=>$v)$count++;return $count;}public static function mget($taglist,$return_plain_list=false){$ret=[];foreach($taglist as $k){if($return_plain_list){$ret[]=[$k,''.db::get($k)];}else{$ret[$k]=''.db::get($k);}}return $ret;}public static function mdelete($taglist){foreach($taglist as $k){db::del($k.'');}}}class kvfile{public static function formatFN($filename){$filename=strtolower($filename);$filename='/'.$filename;while(strpos($filename,'\\')!==false){$filename=str_replace('\\','/',$filename);}while(strpos($filename,'//')!==false){$filename=str_replace('//','/',$filename);}$filename=str_replace(':','_',$filename);$filename=str_replace('*','_',$filename);$filename=str_replace('?','_',$filename);$filename=str_replace('"','_',$filename);$filename=str_replace('<','_',$filename);$filename=str_replace('>','_',$filename);$filename=str_replace('|','_',$filename);return $filename;}public static function read($filename){$filename=kvfile::formatFN($filename);$kv=new SaeKV();return $kv->get(filePrefix.$filename);}public static function update($filename,$filedata){return kvfile::save($filename,$filedata,true,false);}public static function create($filename,$filedata){return kvfile::save($filename,$filedata,false,true);}public static function save($filename,$filedata,$update=false,$create=false){$filename=kvfile::formatFN($filename);$kv=new SaeKV();if($update===true){$rst=$kv->replace(filePrefix.$filename,$filedata);}elseif($create===true){$rst=$kv->add(filePrefix.$filename,$filedata);}else{$rst=$kv->set(filePrefix.$filename,$filedata);}return($rst===true ? $filename:false);}public static function getfilelist($dirpath){$dirpath=kvfile::formatFN($dirpath);if(substr($dirpath,-1)!='/'){return [];}$kv=new SaeKV();$filelist=[];$dirlist=[];$ret=$kv->pkrget(filePrefix.$path,20);while(true){foreach($ret as $k=>$v){if(strlen($k)>strlen($dirpath)){$k=substr($k,strlen(filePrefix));if(substr($k,0,strlen($dirpath))==$dirpath){$k=substr($k,strlen($dirpath));$strpos=strpos($k,'/');if($strpos===false){$filelist[]=''.$k;}else{$k=substr($k,0,$strpos+1);$dirlist[]=''.$k;}}}}end($ret);$start_key=key($ret);$i=count($ret);if($i<20)break;$ret=$kv->pkrget(filePrefix.$path,20,$start_key);}$rtnlist=array_unique($dirlist);foreach($filelist as $file){$rtnlist[]=$file;}return $rtnlist;}public static function del($filename){$filename=kvfile::formatFN($filename);$kv=new SaeKV();return $kv->delete(filePrefix.$filename);}public static function getall($path=''){$kv=new SaeKV();$tags=[];$ret=$kv->pkrget(filePrefix.$path,20);while(true){foreach($ret as $k=>$v){$tags[substr($k,strlen(filePrefix))]=$v;}end($ret);$start_key=key($ret);$i=count($ret);if($i<20)break;$ret=$kv->pkrget(filePrefix.$path,20,$start_key);}return $tags;}public static function clear($path=''){foreach(setting::getall($path)as $filename=>$filedata){setting::del($filename);}}public static function getsize($filename){$filename=kvfile::formatFN($filename);return strlen(kvfile::read($filename));}public static function getformatedsize($filename){$sizelist=['字节','KB','MB','GB','TB'];$size=0;$filesize=kvfile::getsize($filename);while($filesize>700){$filesize=round($filesize/10.24)/100;$size++;}return $filesize.' '.$sizelist[$size];}public static function getfn($path){$fn=explode('/',$filepath);$fn=$fn[count($fn)-1];return $fn;}public static function getmime($content){$finfo=new finfo(FILEINFO_MIME_TYPE);return $finfo->buffer($content);}public static function getextension($mime){require_once('mimey/MimeTypesInterface.php');require_once('mimey/MimeTypes.php');$mimes=new\Mimey\MimeTypes;$rtn=$mimes->getExtension($mime);return $rtn=='bin'?'文件':($rtn=='txt'?'文本文件':($rtn=='jpeg'||$rtn=='png'||$rtn=='bmp'||$rtn=='gif'?'图片':$rtn));}}class setting{public static function get($tag){$kv=new SaeKV();return $kv->get(settingPrefix.$tag);}public static function set($tag,$value){$kv=new SaeKV();return $kv->set(settingPrefix.$tag,$value);}public static function del($tag){$kv=new SaeKV();return $kv->delete(settingPrefix.$tag);}public static function getall($prefix='',$return_plain_list=false){$kv=new SaeKV();$tags=[];$ret=$kv->pkrget(settingPrefix.$prefix,100);while(true){foreach($ret as $k=>$v){if($return_plain_list){$tags[]=[substr($k,strlen(settingPrefix)),''.$v];}else{$tags[substr($k,strlen(settingPrefix))]=''.$v;}}end($ret);$start_key=key($ret);$i=count($ret);if($i<100)break;$ret=$kv->pkrget(settingPrefix.$prefix,100,$start_key);}return $tags;}public static function clear($prefix=''){foreach(setting::getall($prefix)as $k=>$v)setting::del($k);}}